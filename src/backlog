{
  sample: function() {
    var list = d3.range(9 + Math.round(Math.random() * 3));
    var count = d3.range(Math.round(Math.random() * 2) + 2);
    return {
      order: [{name: "Month", data: list.map(function(d,i) { return plotdb.data.sample.month[i].substring(0,3); })}],
      radius: count.map(function(d,i) {
        return {
          name: "Value " + d,
          data: list.map(function(d,i) { return Math.round(Math.random() * 90 + 10); })
        };
      })
    };
  },
  dimension: {
    radius: { type: [plotdb.Number], require: true, multiple: true, desc: "radius of point on radar line" },
    order: { type: [plotdb.Order], desc: "order of data point" }
  },
  config: {
    fontFamily: {},
    background: {},
    textFill: {},
    fontSize: {},
    margin: {},
    padding: {},
    palette: {},
    strokeWidth: {},
    lineSmoothing: {},
    legendLabel: {},
    legendShow: {},
    legendPosition: {},
    rAxisShow: {},
    rAxisLabel: {},
    rAxisTickPadding: {},
    rAxisTickCount: {rebindOnChange: true},
    aAxisShow: {},
    aAxisLabel: {},
    aAxisTickPadding: {},
    nodeShow: {},
    nodeSize: {default: 8},
    nodeStrokeWidth: {default: 2},
    nodeFill: {default: "#fff"},
    gridShow: {},
    gridStroke: {},
    gridStrokeWidth: {},
    gridDashArray: {},
    gridBackground: {},
    popupShow: {},
    unit: {}
  },
  init: function() {
    var that = this;
    this.svg = d3.select(this.root).append("svg");
    this.allGroup = this.svg.append("g");
    this.legendGroup = this.svg.append("g").attr({class: "legend-group"});
    this.gridGroup = this.allGroup.append("g").attr({class: "grid-group"});
    this.aAxisGroup = this.allGroup.append("g").attr({class: "axis angle"});
    this.rAxisGroup = this.allGroup.append("g").attr({class: "axis radius"});
    this.popup = plotd3.html.tooltip(this.root).on("mousemove", function(d,i,popup) {
      var name = that.names[d3.select(this.parentNode).datum().idx];
      var order = that.orders[i];
      popup.select(".title").text(name + " @ " + order);
      popup.select(".value").text(d + " " + (that.config.unit || ""));
    });
    this.line = d3.svg.line().tension(0.5)
      .x(function(d,i) { return that.rScale(d) * Math.sin( that.aScale(that.orders[i]) ); })
      .y(function(d,i) { return that.rScale(d) * -Math.cos( that.aScale(that.orders[i]) ); });
    this.overlap = plotd3.rwd.overlap();
  },
  parse: function() {
    plotdb.Order.sort(this.data, "order");
    this.orders = d3.map(this.data, function(d,i) { return d.order; }).keys();
    this.parsed = d3.transpose(this.data.map(function(it) { return it.radius; }));
    this.parsed.map(function(d,i) { d.idx = i; });
    this.names = this.dimension.radius.fieldName || ["1","2","3"];
    this.radiusRange = d3.extent(this.parsed
      .map(function(it) { return d3.extent(it); })
      .reduce(function(a,b) { return a.concat(b); }, []));
    if(this.radiusRange[0] == this.radiusRange[1]) this.radiusRange[1]++;
  },
  bind: function() {
    var that = this, sel;
    sel = this.allGroup.selectAll("path.data").data(this.parsed);
    sel.exit().attr("class","").transition("exit").duration(500).attr("opacity",0).remove();
    sel.enter().append("path").attr({class: "data", opacity: 0});
    sel = this.allGroup.selectAll("g.data-group").data(this.parsed);
    sel.exit().attr("class","").transition("exit").duration(500).attr("opacity",0).remove();
    sel.enter().append("g").attr({class: "data-group", opacity: 0});
    this.allGroup.selectAll("g.data-group").each(function(d,i) {
      var sel = d3.select(this).selectAll("circle.node").data(d);
      sel.exit().attr("class","").transition("exit").duration(500).attr("opacity",0).remove();
      sel = sel.enter().append("circle").attr({class: "node", opacity: 0});
      if(that.config.popupShow) that.popup.nodes(sel);
    });

    sel = this.gridGroup.selectAll("circle.grid.radius").data(this.rTicks);
    sel.exit().attr("class","").transition("exit").duration(500).attr("opacity",0).remove();
    sel.enter().append("circle").attr({class: "grid radius",opacity: 0, r: 0}).sort(d3.descending);
    this.gridGroup.selectAll("circle.grid.radius").sort(function(a,b) { return b - a;});
    sel = this.gridGroup.selectAll("line.grid.angle").data(this.aTicks);
    sel.exit().attr("class","").transition("exit").duration(500).attr("opacity",0).remove();
    sel.enter().append("line").attr({class: "grid angle",opacity: 0});
    sel = this.aAxisGroup.selectAll("g").data(this.aTicks);
    sel.exit().attr("class","").transition("exit").duration(500).attr("opacity",0).remove();
    sel.enter().append("g").attr({class: "tick"}).each(function(d,i) {
      d3.select(this).append("text").attr("opacity", 0);
    });
  },
  resize: function() {
    var that = this;
    var box = this.root.getBoundingClientRect();
    var width = this.width = box.width;
    var height = this.height = box.height;
    this.svg.attr({
      width: width + "px", height: height + "px",
      viewBox: [0,0,width,height].join(" "),
      preserveAspectRatio: "xMidYMid"
    });
    this.legendVertical = ( this.config.legendPosition == "left" || this.config.legendPosition == "right" ) ? true : false;
    this.line.interpolate(this.config.lineSmoothing);
    this.popup.fontSize(this.config.fontSize);
    this.cScale = plotdb.Palette.scale.ordinal(this.config.palette);
    this.legend = plotd3.rwd.legend()
      .scale(this.cScale)
      .orient(this.config.legendPosition)
      .size(
        (this.legendVertical
        ? [220,this.height - 2 * this.config.margin]
        : [this.width - 2 * this.config.margin, 220]
      ))
      .label(this.config.legendLabel || " ")
      .fontSize(this.config.fontSize);
    this.legend.tickValues(this.names);
    this.legendGroup.call(this.legend).selectAll(".legend").on("mouseover", function(d,i) {
      that.activeGroup = i + 1; that.render();
    }).on("mouseout", function(d,i) {
      that.activeGroup = null; that.render();
    });
    this.legendSize = (this.config.legendShow ? this.legend.offset() : [0,0]);
    var mh = height - (this.config.legendShow && !this.legendVertical ? this.legendSize[1] + this.config.fontSize : 0);
    var mw = width - (this.config.legendShow && this.legendVertical ? this.legendSize[0] + this.config.fontSize : 0);
    
    this.size = ((mw>mh?mh:mw) - that.config.margin * 2 - that.config.fontSize * 2)/2;
    if(this.size <= 10) this.size = 10;
    this.rScale = d3.scale.linear()
      .domain([0,this.radiusRange[1]])
      .range([0,this.size]).nice(5);
    this.rTicks = this.rScale.ticks(this.config.rAxisTickCount);
    this.rTicks.sort(function(a,b) { return b - a; });
    this.niceRRange = this.rScale.domain();
    this.rAxis = plotd3.rwd.axis()
      .scale(this.rScale)
      .orient("radius")
      .angle(Math.PI /(this.data.length || 1))
      .showGrid(false)
      .tickValues(this.rTicks)
      .fontSize(this.config.fontSize);
    this.rAxisGroup.call(this.rAxis).select(".domain").remove();
    this.aScale = d3.scale.ordinal()
      .domain(this.orders.concat(""))
      .rangePoints([0, 2 * Math.PI]);
    this.aTicks = d3.range(this.data.length);
  },
  render: function() {
    var that = this,sel;
    if(this.config.fontFamily) d3.select(this.root).style("font-family", this.config.fontFamily);
    d3.select(this.root).style("background-color", this.config.background);
    this.svg.selectAll("text").attr({
      "font-size": that.config.fontSize,
      "fill": that.config.textFill
    });
    this.legendGroup.attr({
      transform: 
        ["translate(",
        (this.legendVertical
           ? (this.width/2 + 
              (this.config.legendPosition == "left"
              ? -(this.size + this.config.fontSize + this.legendSize[0])
              :  (this.size + this.config.fontSize)
             ))
           : (this.width - this.legendSize[0])/2
        ),
        (!this.legendVertical 
           ? (this.height/2 + 
             (this.config.legendPosition == "top"
             ? -(this.size + this.config.fontSize + this.legendSize[1])
             :  (this.size + this.config.fontSize)
            ))
           : (this.height - this.legendSize[1])/2
        ),
        ")"].join(" "),
      display: (this.config.legendShow ? "block" : "none")
    });
    this.allGroup.attr({
      transform: [
        "translate(",
        ((this.width + (this.legendVertical ? (this.config.legendPosition == "left" ? 1 : -1) : 0) * (this.config.legendShow
          ? this.legendSize[0] + this.config.fontSize 
          : 0))/2
        ), (this.height + (!this.legendVertical ? (this.config.legendPosition == "top" ? 1 : -1) : 0) * (this.config.legendShow
          ? this.legendSize[1] + this.config.fontSize : 0))/2,
        //(this.height/2),
        ")"
      ].join(" ")
    });
    this.gridGroup.attr({
      display: (this.config.gridShow ? "block" : "none")
    }).selectAll("circle.grid.radius").attr({
      cx: 0, cy: 0, fill: this.config.gridBackground, stroke: this.config.gridStroke, 
      "stroke-width": this.config.gridStrokeWidth, "stroke-dasharray": this.config.gridDashArray
    }).transition("morph").duration(500).attr({
      r: function(d,i) { return that.rScale(d); },
      opacity: 1
    });

    this.gridGroup.selectAll("line.grid.angle").attr({
      stroke: this.config.gridStroke,
      "stroke-width": this.config.gridStrokeWidth,
      "stroke-dasharray": this.config.gridDashArray
    }).transition("morph").duration(500).attr({
      x1: 0, y1: 0,
      x2: function(d,i) {
        return that.rScale(that.niceRRange[1]) * Math.sin( that.aScale(that.orders[d]) );
      },
      y2: function(d,i) {
        return that.rScale(that.niceRRange[1]) * -Math.cos( that.aScale(that.orders[d]) );
      },
      opacity: 1
    });
    this.aAxisGroup.attr({
      display: (this.config.aAxisShow ? "block" : "none")
    });
    this.rAxisGroup.attr({
      display: (this.config.rAxisShow ? "block" : "none")
    });
    this.aAxisGroup.selectAll(".tick text").attr({
      "font-size": that.config.fontSize,
      "text-anchor": "middle",
      dy: "0.38em",
    }).text(function(d,i) { return that.orders[i] || i; }).transition("morph").duration(function() {
      return d3.select(this).attr("transform") ? 500 : 0;
    }).attr({
      transform: function(d,i) {
        var r = (that.rScale(that.niceRRange[1]) + 1 * that.config.fontSize);
        var x = r * Math.sin( that.aScale(that.orders[d]) );
        var y = r * -Math.cos( that.aScale(that.orders[d]) );
        var a = (360 * i / that.data.length);
        return ["translate(", x, y, ") rotate(", a, ")"].join(" ");
      },
    });
    this.aAxisGroup.selectAll("text").transition("opacity").duration(500).attr({ opacity: 1 });
    this.allGroup.selectAll("path.data").each(function(d,i) {
      var strokeColor = that.cScale(that.names[i]);
      var rgb = d3.rgb(strokeColor);
      var fillColor = ["rgba(",rgb.r,",",rgb.g,",",rgb.b,",",0.2,")"].join("");
      d3.select(this).attr({
        fill: fillColor,
        stroke: strokeColor,
        "stroke-width": that.config.strokeWidth
      }).transition("morph").duration(500).attr({
        d: function(d,i) { return that.line(d,i) +"Z"; },
      });    
    }).transition("opacity").duration(500).attr({
      opacity: function(d,i) { return (!that.activeGroup || that.activeGroup == i+1 ? 1 : 0.1); }
    });
    this.allGroup.selectAll("g.data-group").each(function(d,i) {
      var node = d3.select(this);
      var strokeColor = that.cScale(that.names[i]);
      var rgb = d3.rgb(strokeColor);
      var fillColor = ["rgba(",rgb.r,",",rgb.g,",",rgb.b,",",0.2,")"].join("");
      node.selectAll("circle.node").attr({
        fill: that.config.nodeFill || "#fff", stroke: strokeColor, "stroke-width": that.config.nodeStrokeWidth,
        display: (that.config.nodeShow ? "block" : "none")
      }).transition("morph").duration(500).attr({
        cx: function(d,i) { return that.rScale(d) * Math.sin( that.aScale(that.orders[i]) ); },
        cy: function(d,i) { return that.rScale(d) * -Math.cos( that.aScale(that.orders[i]) ); },
        r: that.config.nodeSize/2,
        opacity: 1
      });
    });
    this.allGroup.selectAll("g.data-group").transition("opacity").duration(500).attr({
      opacity: function(d,i) { return (!that.activeGroup || that.activeGroup == i+1 ? 1 : 0.1); }
    });
  }
}
